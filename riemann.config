; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init :file "riemann.log")

(require '[clj-http.client :as client] 
         '[cheshire.core :as json])

(defn post-to-alerta
  "POST to the Alerta REST API."
  [request]
  (let [event-url "http://monitoring.gudev.gnl/alerta/api/v2/alerts/alert.json"]
  	(client/post event-url
               {:body (json/generate-string request)
                :socket-timeout 5000
                :conn-timeout 5000
                :content-type :json
                :accept :json
                :throw-entire-message? true})))

(defn format-alerta-event
  "Formats an event for Alerta."
  [event]
  {
   :origin "riemann"
   :resource (:host event)
   :event (:service event)
   :group "Performance"      ; parse from metric name or tags?
   :value (:metric event)
   :severity (:state event)
   :environment 
   	[(if-let [env-tag (first (filter #(re-matches #"^environment:.*" %) (:tags event)))]
   		(last (clojure.string/split env-tag #":"))
   		"INFRA"
   	)]
   :service
    [(if-let [env-tag (first (filter #(re-matches #"^service:.*" %) (:tags event)))]
   		(last (clojure.string/split env-tag #":"))
   		"Common"
   	)]
   :tags (:tags event)
   :text (:description event)
   :rawData event})

(defn alerta
  "Creates an alerta adapter.
    (changed-state (alerta))"
  [e]
  (post-to-alerta (format-alerta-event e)))


(tcp-server)
(udp-server)
(ws-server)
(repl-server)

(graphite-server :host "gnm41175.int.gnl"
:protocol :udp
:parser-fn (fn [{:keys [service] :as event}]
              (if-let [[env grid cluster host real-service]
                       (clojure.string/split service #"\.")]
                {:host (clojure.string/replace host #"_" ".")
                 :service real-service
                 :tags ["riemann:true" (str "environment:" env) (str "cluster:" cluster) (str "service:" grid)]}))
)

(periodically-expire 10)

(defn now
  []
  (let [now (java.util.Date.)]
    (Math/floor (/ (.getTime now) 1000))))

(let [index (default :ttl 600 (update-index (index)))]
  (streams
  	index
  	(by [:host]
  		(where* (fn [e] 
  			(let [boot-threshold (- (now) 7200)]
  				(and (= "boottime" (:service e)) (> (:metric e) boot-threshold))))
  			(with :state "informational" alerta)))
))

(defn service-is [service e] (= service (get e :service "")))

(streams
	(where* (partial service-is "heartbeat")
		(splitp < metric
			90 (with :state "critical" alerta)
			(with :state "normal" alerta))))

(defn switch-epoch-to-elapsed
	[& children]
	(fn [e] ((apply with {:metric (- (now) (:metric e))} children) e)))

(defn add-description
	[description & children]
	(fn [e] ((let [pup-errors "bob"] (apply with :description (str description ": " pup-errors) children)) e)))

(defn puppet-failed-description [e]
	(format "Puppet has not run for host %s" (:host e)))

(defn gu-transform [f & children]
	(fn [event] (let [transformed-event (f event)]
		(call-rescue transformed-event children))))

(streams
	(by [:host]
		(where* (partial service-is "pup_last_run")
			(let [last-run-threshold (- (now) 7200)
				time-elapsed (fn [e] (- (now) (:metric e)))] 
				(splitp > metric
					last-run-threshold (gu-transform (fn [e] (assoc e :state "major" :metric (time-elapsed e))) alerta)
					(gu-transform
						(fn [e] (assoc e :state "normal" :description (puppet-failed-description e) :metric (time-elapsed e)))
						alerta prn))))))

(streams
	(by [:host]
		(gu-transform (fn [e] {:hello "world"}) prn prn)))